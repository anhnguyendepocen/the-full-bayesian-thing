if (exists('models')){
models = merge(models,model.domains)
} else {
models = model.domains
}
}
models$syll <- factor(models$syll)
models$domain <- factor(models$domain)
d
read.csv(paste(model.dir,d,'/00/csv/lis_N0_M0_tfbt',
d,'_qud1figFull_AIEOc4CAEP1_n',n_obj,
'_base0.00_s100k_alphQ1_alphR1_bsmean.csv',sep=''))
# Load model predictions, for different parameter (n_object) values
model.dir<-'/Users/mht/Documents/research/syllogism/models/modeldata/LATTICE_4_tfbt/'
syllogisms = c('AO2', 'EA3', 'IE1', 'OA1')
n_obj = 4
corrs = c()
if (exists('models')){remove(models)}
for (n_obj in 3:11){
model.domains = data.frame()
for (d in domains){
model.all<-read.csv(paste(model.dir,d,'/00/csv/lis_N0_M0_tfbt',
d,'_qud1figFull_AIEOc4CAEP1_n',n_obj,
'_base0.00_s100k_alphQ1_alphR1_bsmean.csv',sep=''))[c(1,6:9)]
model.sub<-model.all[model.all$X..syll%in%syllogisms,]
model.sub$domain <- d
model.m<-melt(model.sub,id.vars=c('X..syll','domain'))
model.domains<-rbind(model.domains, model.m)
}
#rename for merging
names(model.domains)<-c('syll','domain','conclusion',paste('n',n_obj,sep=''))
if (exists('models')){
models = merge(models,model.domains)
} else {
models = model.domains
}
}
models$syll <- factor(models$syll)
models$domain <- factor(models$domain)
cncl_labels = levels(models$conclusion)
all.stuff<-merge(m.models,collapsed.bs[c('domain','syll','value','conclusion')],
by=c('syll','domain','conclusion'))
head(all.stuff)
head(models)
m.models<-melt(models, id.vars=c('syll','domain','conclusion'))
all.stuff<-merge(m.models,collapsed.bs[c('domain','syll','value','conclusion')],
by=c('syll','domain','conclusion'))
head(all.stuff)
head(models)
model.fits<-ddply(all.stuff, .(variable), summarise, cor(value.x, value.y))
names(model.fits)<-c('n','correlation')
model.fits$n<-as.integer(substring(model.fits$n,2,3))
max.loc<-which.max(model.fits$correlation)
ggplot(model.fits, aes(x=n))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(xn, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue")+
theme_bw()+
scale_x_continuous(breaks=3:11)
ggplot(model.fits, aes(x=n))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue")+
theme_bw()+
scale_x_continuous(breaks=3:11)
ggplot(model.fits, aes(x=n))+
geom_tile(aes(fill = correlation), colour = "white")
ggplot(model.fits, aes(x=n,y=1))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue")+
theme_bw()+
scale_x_continuous(breaks=3:11)
ggplot(model.fits, aes(x=n,y=1))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue")+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
ggplot(model.fits, aes(x=n,y=1))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=1, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue")+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
ggplot(model.fits, aes(x=n,y=1))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=1, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.7,0.8))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
ggplot(model.fits, aes(x=n,y=1))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=1, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.7,0.85))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
ggplot(model.fits, aes(x=n,y=1))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=1, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.0,1))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
ggplot(model.fits, aes(x=n,y=1))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=1, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.6,0.85))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()+
ylim(1,1)
ggplot(model.fits, aes(x=n,y=factor(1)))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=1, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.6,0.85))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete(
)
ggplot(model.fits, aes(x=n,y=factor(1)))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(aes(x=n,y=1, label=round(correlation,2)),size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.6,0.85))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
head(collapsed.bs)
subset(collapsed.bs,experiment==2)
collapsed.bs <- subset(agr.ci.collapsed(melt(df.norm)),experiment==2)
collapsed.bs$conclusion = factor(collapsed.bs$variable, labels=c('all.C.A','none.C.A','some.C.A','not.all.C.A'))
collapsed.bs$domain = factor(collapsed.bs$domain, labels=domains)
levels(collapsed.bs$syll)
collapsed.bs
levels(factor(collapsed.bs))
levels(factor(collapsed.bs$syll))
collapsed.bs <- subset(agr.ci.collapsed(melt(df.norm)),experiment==2)
collapsed.bs$conclusion = factor(collapsed.bs$variable, labels=c('all.C.A','none.C.A','some.C.A','not.all.C.A'))
collapsed.bs$domain = factor(collapsed.bs$domain, labels=domains)
# Load model predictions, for different parameter (n_object) values
model.dir<-'/Users/mht/Documents/research/syllogism/models/modeldata/LATTICE_4_tfbt/'
syllogisms = c("AA1", "AI1", "EA1", "EI1")
if (exists('models')){remove(models)}
for (n_obj in 3:11){
model.domains = data.frame()
for (d in domains){
model.all<-read.csv(paste(model.dir,d,'/00/csv/lis_N0_M0_tfbt',
d,'_qud1figFull_AIEOc4CAEP1_n',n_obj,
'_base0.00_s100k_alphQ1_alphR1_bsmean.csv',sep=''))[c(1,6:9)]
model.sub<-model.all[model.all$X..syll%in%syllogisms,]
model.sub$domain <- d
model.m<-melt(model.sub,id.vars=c('X..syll','domain'))
model.domains<-rbind(model.domains, model.m)
}
#rename for merging
names(model.domains)<-c('syll','domain','conclusion',paste('n',n_obj,sep=''))
if (exists('models')){
models = merge(models,model.domains)
} else {
models = model.domains
}
}
models$syll <- factor(models$syll)
models$domain <- factor(models$domain)
cncl_labels = levels(models$conclusion)
m.models<-melt(models, id.vars=c('syll','domain','conclusion'))
all.stuff<-merge(m.models,collapsed.bs[c('domain','syll','value','conclusion')],
by=c('syll','domain','conclusion'))
model.fits<-ddply(all.stuff, .(variable), summarise, cor(value.x, value.y))
names(model.fits)<-c('n','correlation')
model.fits$n<-as.integer(substring(model.fits$n,2,3))
max.loc<-which.max(model.fits$correlation)
ggplot(model.fits, aes(x=n,y=factor(1)))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(aes(x=n,y=1, label=round(correlation,2)),size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.6,0.85))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
ggplot(model.fits, aes(x=n,y=factor(1)))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(aes(x=n,y=1, label=round(correlation,2)),size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.8,0.95))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
# Load model predictions, for different parameter (n_object) values
# H4: n_objects, alpha (empirical prior + pragmatics)
model.dir<-'/Users/mht/Documents/research/syllogism/models/modeldata/LATTICE_4_tfbt/'
domains<- c('cracker', 'knife', 'lightbulb', 'strawberry')
syllogisms = c("AA1", "AI1", "EA1", "EI1")
if (exists('models')){remove(models)}
# this code relies upon the same parameter values being explored for all
# e.g. same range of alpha values for all levels of n_obj
for (n_obj in 3:11){
model.domains = data.frame()
for (d in domains){
dom.path = paste(model.dir,d,'/10/csv/',sep='')
model.files <- list.files(dom.path)
model.files <- model.files[!(grepl("CLonly",model.files))]
model.files <- model.files[!(grepl("1000k",model.files))]
model.files <- model.files[grepl(paste("_n",n_obj,'_base',sep=''),model.files)]
for (m.file in model.files){
model.all<-read.csv(paste(dom.path,m.file,sep=''))[c(1,6:9)]
model.sub<-model.all[model.all$X..syll%in%syllogisms,]
model.sub$domain <- as.factor(d)
model.sub$alpha <- as.numeric(substring(strsplit(m.file,'alphQ')[[1]][2],1,3))
model.m<-melt(model.sub,id.vars=c('X..syll','domain','alpha'))
model.domains<-rbind(model.domains, model.m)
}
}
#rename for merging
print(n_obj)
names(model.domains)<-c('syll','domain','alpha','conclusion',paste('n',n_obj,sep=''))
if (exists('models')){
models = merge(models,model.domains)
} else {
models = model.domains
}
}
models$syll <- factor(models$syll)
m.models<-melt(models, id.vars=c('syll','domain','alpha','conclusion'))
all.stuff<-merge(m.models,collapsed.bs[c('domain','syll','value','conclusion')],
by=c('syll','domain','conclusion'))
model.fits<-ddply(all.stuff, .(alpha, variable), summarise, cor(value.x, value.y))
names(model.fits)<-c('alpha','n','correlation')
model.fits$n<-as.integer(substring(model.fits$n,2,3))
model.fits$alpha<-factor(model.fits$alpha)
max.loc<-which.max(model.fits$correlation)
ggplot(model.fits, aes(x=n,y=alpha))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=alpha, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=alpha, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.8,0.99))+
theme_bw()+
scale_x_continuous(breaks=3:11)
ggplot(model.fits, aes(x=n,y=alpha))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=alpha, fill=correlation),
size=2,colour='black')+
geom_text(data=model.fits[max.loc,], aes(x=n,y=alpha, label=round(correlation,2)),
size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.6,0.99))+
theme_bw()+
scale_x_continuous(breaks=3:11)
head(models)
max.loc
model.fits[max.loc,]
subset(models, alpha==2)
head(subset(models, alpha==2))
ggplot(subset(models, alpha==2), aes(x=conclusion,y=n4,fill=conclusion))+
geom_bar()+
facet_grid(domain~syll)+
theme_bw()
ggplot(subset(models, alpha==2), aes(x=conclusion,y=n4,fill=conclusion))+
geom_bar(stat='identity')+
facet_grid(domain~syll)+
theme_bw()
ggplot(subset(models, alpha==3), aes(x=conclusion,y=n6,fill=conclusion))+
geom_bar(stat='identity')+
facet_grid(domain~syll)+
theme_bw()
ggplot(subset(models, alpha==2.5), aes(x=conclusion,y=n6,fill=conclusion))+
geom_bar(stat='identity')+
facet_grid(domain~syll)+
theme_bw()
collapsed.bs <- subset(agr.ci.collapsed(melt(df.norm)),experiment==2)
collapsed.bs$conclusion = factor(collapsed.bs$variable, labels=c('all.C.A','none.C.A','some.C.A','not.all.C.A'))
collapsed.bs$domain = factor(collapsed.bs$domain, labels=domains)
# Load model predictions, for different parameter (n_object) values
model.dir<-'/Users/mht/Documents/research/syllogism/models/modeldata/LATTICE_4_tfbt/'
syllogisms = c("AA1", "AI1", "EA1", "EI1")
if (exists('models')){remove(models)}
for (n_obj in 3:11){
model.domains = data.frame()
for (d in domains){
model.all<-read.csv(paste(model.dir,d,'/00/csv/lis_N0_M0_tfbt',
d,'_qud1figFull_AIEOc4CAEP1_n',n_obj,
'_base0.00_s100k_alphQ1_alphR1_bsmean.csv',sep=''))[c(1,6:9)]
model.sub<-model.all[model.all$X..syll%in%syllogisms,]
model.sub$domain <- d
model.m<-melt(model.sub,id.vars=c('X..syll','domain'))
model.domains<-rbind(model.domains, model.m)
}
#rename for merging
names(model.domains)<-c('syll','domain','conclusion',paste('n',n_obj,sep=''))
if (exists('models')){
models = merge(models,model.domains)
} else {
models = model.domains
}
}
models$syll <- factor(models$syll)
models$domain <- factor(models$domain)
cncl_labels = levels(models$conclusion)
m.models<-melt(models, id.vars=c('syll','domain','conclusion'))
all.stuff<-merge(m.models,collapsed.bs[c('domain','syll','value','conclusion')],
by=c('syll','domain','conclusion'))
model.fits<-ddply(all.stuff, .(variable), summarise, cor(value.x, value.y))
names(model.fits)<-c('n','correlation')
model.fits$n<-as.integer(substring(model.fits$n,2,3))
max.loc<-which.max(model.fits$correlation)
ggplot(model.fits, aes(x=n,y=factor(1)))+
geom_tile(aes(fill = correlation), colour = "white") +
geom_tile(data=model.fits[max.loc,], aes(x=n,y=1, fill=correlation),
size=2,colour='black')+
geom_text(aes(x=n,y=1, label=round(correlation,2)),size=8,colour='black')+
scale_fill_gradient(low = "white", high = "steelblue",limits=c(0.8,0.95))+
theme_bw()+
scale_x_continuous(breaks=3:11)+
scale_y_discrete()
ggplot(subset(models), aes(x=conclusion,y=n7,fill=conclusion))+
geom_bar(stat='identity')+
facet_grid(domain~syll)+
theme_bw()
?phi
# Pledgers, Order Constrained Rates
cat('model{
# Order Constrained Rates
theta1 ~ dunif(0,theta2)
theta2 ~ dunif(0,1)
# Data
s1 ~ dbin(theta1,n1)
s2 ~ dbin(theta2,n2)
# Difference
delta <- theta1-theta2
# Prior Sampling
theta2prior ~ dunif(0,1)
theta1prior ~ dunif(0,theta2prior)
deltaprior  <- theta1prior-theta2prior
}',file={f<-tempfile()})
s1 <- 424
s2 <- 5416
n1 <- 777
n2 <- 9072
data  <- list("s1","s2","n1","n2") # to be passed on to JAGS
myinits <- list(
list(thetap = c(-.8,-.4)),
list(thetap = c(-.5,-.25)),
list(thetap = c(-.2,-.1)))
parameters <- c("delta", "deltaprior")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file=f,
n.chains=3, n.iter=20000, n.burnin=1000, n.thin=1, DIC=T)
# Collect posterior samples across all chains:
df <-data.frame(delta.post=samples$BUGSoutput$sims.list$delta,
delta.prior=samples$BUGSoutput$sims.list$deltaprior)
#============ BFs based on logspline fit ===========================
fit.posterior <- logspline(df$delta.post, lbound=-1, ubound=0)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior     <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior         <- 2*dlogspline(0, fit.prior)     # based on the logspline fit
BF01          <- posterior/prior
a<-ggplot(data=df)+
geom_density(aes(x=delta.post),linetype='dashed')+
geom_density(aes(x=delta.prior))+
geom_point(x=0,y=prior)+
geom_point(x=0,y=posterior,color='red')+
theme_bw()+
xlim(-1,0)+
xlab('Delta')
b<-ggplot(data=df)+
geom_density(aes(x=delta.post),linetype='dashed')+
geom_density(aes(x=delta.prior))+
geom_point(x=0,y=prior)+
geom_point(x=0,y=posterior,color='red')+
theme_bw()+
xlim(-0.1,0)+
xlab('Delta')
grid.arrange(a,b,nrow=1)
library(R2jags)
library(gridExtra)
library(reshape2)
library(polspline)
library(ggplot2)
setwd("/Users/mht/Documents/learning/tfbt/Lee&Wagenmakers/Code/ModelSelection/Means/")
# Pledgers, Order Constrained Rates
cat('model{
# Order Constrained Rates
theta1 ~ dunif(0,theta2)
theta2 ~ dunif(0,1)
# Data
s1 ~ dbin(theta1,n1)
s2 ~ dbin(theta2,n2)
# Difference
delta <- theta1-theta2
# Prior Sampling
theta2prior ~ dunif(0,1)
theta1prior ~ dunif(0,theta2prior)
deltaprior  <- theta1prior-theta2prior
}',file={f<-tempfile()})
s1 <- 424
s2 <- 5416
n1 <- 777
n2 <- 9072
data  <- list("s1","s2","n1","n2") # to be passed on to JAGS
myinits <- list(
list(thetap = c(-.8,-.4)),
list(thetap = c(-.5,-.25)),
list(thetap = c(-.2,-.1)))
parameters <- c("delta", "deltaprior")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file=f,
n.chains=3, n.iter=20000, n.burnin=1000, n.thin=1, DIC=T)
# Collect posterior samples across all chains:
df <-data.frame(delta.post=samples$BUGSoutput$sims.list$delta,
delta.prior=samples$BUGSoutput$sims.list$deltaprior)
#============ BFs based on logspline fit ===========================
fit.posterior <- logspline(df$delta.post, lbound=-1, ubound=0)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior     <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior         <- 2*dlogspline(0, fit.prior)     # based on the logspline fit
BF01          <- posterior/prior
a<-ggplot(data=df)+
geom_density(aes(x=delta.post),linetype='dashed')+
geom_density(aes(x=delta.prior))+
geom_point(x=0,y=prior)+
geom_point(x=0,y=posterior,color='red')+
theme_bw()+
xlim(-1,0)+
xlab('Delta')
b<-ggplot(data=df)+
geom_density(aes(x=delta.post),linetype='dashed')+
geom_density(aes(x=delta.prior))+
geom_point(x=0,y=prior)+
geom_point(x=0,y=posterior,color='red')+
theme_bw()+
xlim(-0.1,0)+
xlab('Delta')
grid.arrange(a,b,nrow=1)
fit.posterior <- logspline(df$delta.post, lbound=-1, ubound=0)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior     <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
fit.prior     <- logspline(df$delta.prior, lbound=-1, ubound=1) # note the bounds.
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior     <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior         <- 2*dlogspline(0, fit.prior)     # based on the logspline fit
BF01          <- posterior/prior
a<-ggplot(data=df)+
geom_density(aes(x=delta.post),linetype='dashed')+
geom_density(aes(x=delta.prior))+
geom_point(x=0,y=prior)+
geom_point(x=0,y=posterior,color='red')+
theme_bw()+
xlim(-1,0)+
xlab('Delta')
b<-ggplot(data=df)+
geom_density(aes(x=delta.post),linetype='dashed')+
geom_density(aes(x=delta.prior))+
geom_point(x=0,y=prior)+
geom_point(x=0,y=posterior,color='red')+
theme_bw()+
xlim(-0.1,0)+
xlab('Delta')
grid.arrange(a,b,nrow=1)
BF0
BF01
1/BF01
