theme_solarized()
ggplot(subset(turk.data,trial_type=='implied_prevalence'),aes(x=implied_prevalence,fill=stim_determiner))+
geom_histogram()+
facet_wrap(~stim_determiner)+
theme_solarized_2()
ggplot(subset(turk.data,trial_type=='truth_conditions' & truth_conditions==TRUE),aes(x=stim_prevalence,fill=stim_determiner))+
geom_bar(stat='bin')+
facet_wrap(~stim_determiner)+
theme_solarized()
ggplot(subset(turk.data,trial_type=='implied_prevalence'),aes(x=implied_prevalence,fill=stim_determiner))+
geom_histogram()+
facet_wrap(~stim_determiner)+
theme_solarized()
ggplot(subset(turk.data,trial_type=='truth_conditions' & truth_conditions==TRUE),aes(x=stim_prevalence,fill=stim_determiner))+
geom_bar(stat='bin')+
facet_wrap(~stim_determiner)+
theme_solarized()
ggplot(subset(turk.data,trial_type=='implied_prevalence'),aes(x=implied_prevalence,fill=stim_determiner))+
geom_histogram(binwidth=10)+
facet_wrap(~stim_determiner)+
theme_solarized()
ggplot(subset(turk.data,trial_type=='truth_conditions' & truth_conditions==TRUE),aes(x=stim_prevalence,fill=stim_determiner))+
geom_bar(stat='bin')+
facet_wrap(~stim_determiner)+
theme_solarized()
ggplot(subset(turk.data,trial_type=='truth_conditions' & truth_conditions==FALSE),aes(x=stim_prevalence,fill=stim_determiner))+
geom_bar(stat='bin')+
facet_wrap(~stim_determiner)+
theme_solarized()
ggplot(subset(turk.data,trial_type=='truth_conditions'),aes(x=stim_prevalence,fill=truth_conditions))+
geom_bar(stat='bin')+
facet_wrap(~stim_determiner)+
theme_solarized()
head(turk.data)
table(turk.data[,c("stim_determiner","stim_prevalence")])
table(subset(turk.data,trial_type=='implied_prevalence')[,c("stim_determiner"])
table(subset(turk.data,trial_type=='implied_prevalence')[,c("stim_determiner")])
library(reshape2)
library(ggplot2)
library(R2jags)
cat('# Signal Detection Theory
model{
for (i in 1:k){
# Observed counts
h[i] ~ dbin(thetah[i],s[i])
f[i] ~ dbin(thetaf[i],n[i])
# Reparameterization Using Equal-Variance Gaussian SDT
thetah[i] <- phi(d[i]/2-c[i])
thetaf[i] <- phi(-d[i]/2-c[i])
# These Priors over Discriminability and Bias Correspond
# to Uniform Priors over the Hit and False Alarm Rates
d[i] ~ dnorm(0,0.5)
c[i] ~ dnorm(0,2)
}
}',file={f<-tempfile()})
dataset <- 1
if (dataset == 1) #Demo
{
k <- 3 #number of cases
data <- matrix(c(70, 50, 30, 50, 7, 5, 3, 5, 10, 0, 0, 10), nrow=k, ncol=4, byrow=T)
}
if (dataset == 2) #Lehrner et al. (1995) data
{
k <- 3 #number of cases
data <- matrix(c(148, 29, 32, 151, 150, 40, 30, 140, 150, 51, 40, 139), nrow=k, ncol=4, byrow=T)
}
h <- data[,1]
f <- data[,2]
MI <- data[,3]
CR <- data[,4]
s <- h + MI
n <- f + CR
data <- list("h", "f", "k", "s", "n") # to be passed on to JAGS
myinits <- list(
list(d = rep(0,k), c = rep(0,k)))
# parameters to be monitored:
parameters <- c("d", "c", "thetah", "thetaf")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file = f,
n.chains=1, n.iter=10000, n.burnin=1, n.thin=1)```
dataset <- 1
if (dataset == 1) #Demo
{
k <- 3 #number of cases
data <- matrix(c(70, 50, 30, 50, 7, 5, 3, 5, 10, 0, 0, 10), nrow=k, ncol=4, byrow=T)
}
if (dataset == 2) #Lehrner et al. (1995) data
{
k <- 3 #number of cases
data <- matrix(c(148, 29, 32, 151, 150, 40, 30, 140, 150, 51, 40, 139), nrow=k, ncol=4, byrow=T)
}
h <- data[,1]
f <- data[,2]
MI <- data[,3]
CR <- data[,4]
s <- h + MI
n <- f + CR
data <- list("h", "f", "k", "s", "n") # to be passed on to JAGS
myinits <- list(
list(d = rep(0,k), c = rep(0,k)))
parameters <- c("d", "c", "thetah", "thetaf")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file = f,
n.chains=1, n.iter=10000, n.burnin=1, n.thin=1)```
samples <- jags(data, inits=myinits, parameters,
model.file = f,
n.chains=1, n.iter=10000, n.burnin=1, n.thin=1)
samples <- jags(data, inits=myinits, parameters,
model.file = f, n.chains=1, n.iter=10000, n.burnin=1, n.thin=1)
cat('# Signal Detection Theory
model{
for (i in 1:k){
# Observed counts
h[i] ~ dbin(thetah[i],s[i])
f[i] ~ dbin(thetaf[i],n[i])
# Reparameterization Using Equal-Variance Gaussian SDT
thetah[i] <- phi(d[i]/2-c[i])
thetaf[i] <- phi(-d[i]/2-c[i])
# These Priors over Discriminability and Bias Correspond
# to Uniform Priors over the Hit and False Alarm Rates
d[i] ~ dnorm(0,0.5)
c[i] ~ dnorm(0,2)
}
}',file={f<-tempfile()})
samples <- jags(data, inits=myinits, parameters,
model.file = f, n.chains=1, n.iter=10000, n.burnin=1, n.thin=1)
cat('# Signal Detection Theory
model{
for (i in 1:k){
# Observed counts
h[i] ~ dbin(thetah[i],s[i])
f[i] ~ dbin(thetaf[i],n[i])
# Reparameterization Using Equal-Variance Gaussian SDT
thetah[i] <- phi(d[i]/2-c[i])
thetaf[i] <- phi(-d[i]/2-c[i])
# These Priors over Discriminability and Bias Correspond
# to Uniform Priors over the Hit and False Alarm Rates
d[i] ~ dnorm(0,0.5)
c[i] ~ dnorm(0,2)
}
}',file={fle<-tempfile()})
samples <- jags(data, inits=myinits, parameters,
model.file = fle, n.chains=1, n.iter=10000, n.burnin=1, n.thin=1)
rm(list=ls())
library(reshape2)
library(ggplot2)
library(R2jags)
cat('# Signal Detection Theory
model{
for (i in 1:k){
# Observed counts
h[i] ~ dbin(thetah[i],s[i])
f[i] ~ dbin(thetaf[i],n[i])
# Reparameterization Using Equal-Variance Gaussian SDT
thetah[i] <- phi(d[i]/2-c[i])
thetaf[i] <- phi(-d[i]/2-c[i])
# These Priors over Discriminability and Bias Correspond
# to Uniform Priors over the Hit and False Alarm Rates
d[i] ~ dnorm(0,0.5)
c[i] ~ dnorm(0,2)
}
}',file={fle<-tempfile()})
dataset <- 1
if (dataset == 1) #Demo
{
k <- 3 #number of cases
data <- matrix(c(70, 50, 30, 50, 7, 5, 3, 5, 10, 0, 0, 10), nrow=k, ncol=4, byrow=T)
}
if (dataset == 2) #Lehrner et al. (1995) data
{
k <- 3 #number of cases
data <- matrix(c(148, 29, 32, 151, 150, 40, 30, 140, 150, 51, 40, 139), nrow=k, ncol=4, byrow=T)
}
h <- data[,1]
f <- data[,2]
MI <- data[,3]
CR <- data[,4]
s <- h + MI
n <- f + CR
data <- list("h", "f", "k", "s", "n") # to be passed on to JAGS
myinits <- list(
list(d = rep(0,k), c = rep(0,k)))
# parameters to be monitored:
parameters <- c("d", "c", "thetah", "thetaf")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file = fle, n.chains=1, n.iter=10000, n.burnin=1, n.thin=1)
df<- data.frame(d1 <- samples$BUGSoutput$sims.list$d[,1],
d2 <- samples$BUGSoutput$sims.list$d[,2],
d3 <- samples$BUGSoutput$sims.list$d[,3],
c1 <- samples$BUGSoutput$sims.list$c[,1],
c2 <- samples$BUGSoutput$sims.list$c[,2],
c3 <- samples$BUGSoutput$sims.list$c[,3],
h1 <- samples$BUGSoutput$sims.list$thetah[,1],
h2 <- samples$BUGSoutput$sims.list$thetah[,2],
h3 <- samples$BUGSoutput$sims.list$thetah[,3],
f1 <- samples$BUGSoutput$sims.list$thetaf[,1],
f2 <- samples$BUGSoutput$sims.list$thetaf[,2],
f3 <- samples$BUGSoutput$sims.list$thetaf[,3])
head(df)
df<- data.frame(d1 = samples$BUGSoutput$sims.list$d[,1],
d2 = samples$BUGSoutput$sims.list$d[,2],
d3 <- samples$BUGSoutput$sims.list$d[,3],
c1 <- samples$BUGSoutput$sims.list$c[,1],
c2 <- samples$BUGSoutput$sims.list$c[,2],
c3 <- samples$BUGSoutput$sims.list$c[,3],
h1 <- samples$BUGSoutput$sims.list$thetah[,1],
h2 <- samples$BUGSoutput$sims.list$thetah[,2],
h3 <- samples$BUGSoutput$sims.list$thetah[,3],
f1 <- samples$BUGSoutput$sims.list$thetaf[,1],
f2 <- samples$BUGSoutput$sims.list$thetaf[,2],
f3 <- samples$BUGSoutput$sims.list$thetaf[,3])
head(df)
df<- data.frame(d1 = samples$BUGSoutput$sims.list$d[,1],
d2 = samples$BUGSoutput$sims.list$d[,2],
d3 = samples$BUGSoutput$sims.list$d[,3],
c1 = samples$BUGSoutput$sims.list$c[,1],
c2 = samples$BUGSoutput$sims.list$c[,2],
c3 = samples$BUGSoutput$sims.list$c[,3],
h1 = samples$BUGSoutput$sims.list$thetah[,1],
h2 = samples$BUGSoutput$sims.list$thetah[,2],
h3 = samples$BUGSoutput$sims.list$thetah[,3],
f1 = samples$BUGSoutput$sims.list$thetaf[,1],
f2 = samples$BUGSoutput$sims.list$thetaf[,2],
f3 = samples$BUGSoutput$sims.list$thetaf[,3])
head(df)
melt(df)
df.m<- melt(df)
head(df.m)
df.m$metric <- substring(df.m$variable,1,1)
head(df.m)
df.m$dset <- substring(df.m$variable,2,2)
ggplot(df.m,aes(x=value,fill=dset))+
geom_density()
facet_wrap(~metric)+
theme_solarized()
ggplot(df.m,aes(x=value,fill=dset))+
geom_density()+
facet_wrap(~metric)+
theme_solarized()
ggplot(df.m,aes(x=value,fill=dset))+
geom_density()+
facet_wrap(~metric,scale='free')+
theme_solarized()
df.m<- melt(df)
df.m$metric <- factor(substring(df.m$variable,1,1),levels=c('d','b','h','f'),
labels=c('discriminability','bias','hit rate','false alarm rate'))
df.m$dset <- factor(substring(df.m$variable,2,2),labels=c('h=70/100, f=50/100',
'h=7/10, f=5/10',
'h=10/10 f=0/10'))
ggplot(df.m,aes(x=value,fill=dset))+
geom_density()+
facet_wrap(~metric,scale='free')+
theme_solarized()
df.m$metric <- factor(substring(df.m$variable,1,1),levels=c('d','c','h','f'),
labels=c('discriminability','bias','hit rate','false alarm rate'))
df.m$dset <- factor(substring(df.m$variable,2,2),labels=c('h=70/100, f=50/100',
'h=7/10, f=5/10',
'h=10/10 f=0/10'))
ggplot(df.m,aes(x=value,fill=dset))+
geom_density()+
facet_wrap(~metric,scale='free')+
theme_solarized()
setwd("/Users/mht/Documents/learning/tfbt/Lee&Wagenmakers/Code/ParameterEstimation/Binomial")
cat('# Inferring a Rate
model{
# Prior Distribution for Rate Theta
theta ~ dbeta(1,1)
# Observed Counts
k ~ dbin(theta,n)
}',file={f<-tempfile()})
rm(list=ls())
library(R2jags)
library(gridExtra)
k <- 5 # number of heads
n <- 10 # number of samples
data <- list("k", "n") # to be passed on to JAGS
myinits <- list(
list(theta = 0.1), #chain 1 starting value
list(theta = 0.9)) #chain 2 starting value
parameters <- c("theta") # parameters to be monitored
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file = f, n.chains=2, n.iter=20000,
n.burnin=1, n.thin=1, DIC=T)
cat('# Inferring a Rate
model{
# Prior Distribution for Rate Theta
theta ~ dbeta(1,1)
# Observed Counts
k ~ dbin(theta,n)
}',file={f<-tempfile()})
rm(list=ls())
library(R2jags)
library(gridExtra)
k <- 5 # number of heads
n <- 10 # number of samples
data <- list("k", "n") # to be passed on to JAGS
myinits <- list(
list(theta = 0.1), #chain 1 starting value
list(theta = 0.9)) #chain 2 starting value
parameters <- c("theta") # parameters to be monitored
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file = f, n.chains=2, n.iter=20000,
n.burnin=1, n.thin=1, DIC=T)
cat('# Inferring a Rate
model{
# Prior Distribution for Rate Theta
theta ~ dbeta(1,1)
# Observed Counts
k ~ dbin(theta,n)
}',file={f<-tempfile()})
f
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file = f, n.chains=2, n.iter=20000,
n.burnin=1, n.thin=1, DIC=T)
print(samples)  # a rough summary
plot(samples)   # a visual representation
traceplot(samples) # traceplot (press <enter> repeatedly to see the chains)
summary(samples)
summary(samples$BUGSoutput)
chain <- 1
samples$BUGSoutput$sims.array[1:15,chain,]# array: element, chain, column (theta/deviance)
posterior <- data.frame(samples$BUGSoutput$sims.list$theta)
names(posterior)<-c('theta')
# Now let's plot a histogram for theta.
ggplot(data=posterior,aes(x=theta))+
geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
theme_bw()+
ggtitle('3.1.1: k=5, n=10')
xlim(0,1)
ggplot(data=posterior,aes(x=theta))+
geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
theme_solarized()+
ggtitle('3.1.1: k=5, n=10')
xlim(0,1)
k <- 10 # number of heads
n <- 20 # number of samples
samples <- jags(data, inits=myinits, parameters,
model.file =f, n.chains=2, n.iter=20000,
n.burnin=1, n.thin=1, DIC=T)
# Collect posterior samples across all chains:
posterior <- data.frame(samples$BUGSoutput$sims.list$theta)
names(posterior)<-c('theta')
# Now let's plot a histogram for theta.
quartz()
ggplot(data=posterior,aes(x=theta))+
# geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2, color='green')+
theme_bw()+
ggtitle('3.1.3: k=50, n=100')+
xlim(0,1)
ggplot(data=posterior,aes(x=theta))+
# geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2)+
theme_solarized()+
ggtitle('3.1.3: k=50, n=100')+
xlim(0,1)
k1 <- 5
k2 <- 7
n1 <- 10
n2 <- 10
cat('# Difference Between Two Rates
model{
# Observed Counts
k1 ~ dbin(theta1,n1)
k2 ~ dbin(theta2,n2)
# Prior on Rates
theta1 ~ dbeta(1,1)
theta2 ~ dbeta(1,1)
# Difference Between Rates
delta <- theta1-theta2
}',file={f<-tempfile()})
data <- list("k1", "k2", "n1", "n2") # to be passed on to JAGS
myinits <-  list(
list(theta1 = 0.1, theta2 = 0.9))
# parameters to be monitored:
parameters <- c("delta", "theta1", "theta2")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file =f, n.chains=1, n.iter=10000,
n.burnin=1, n.thin=1, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
post_delta <- data.frame(samples$BUGSoutput$sims.list$delta)
names(post_delta)<-c('delta')
ggplot(data=post_delta,aes(x=delta))+
#geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2,colour='blue')+
theme_bw()+
ggtitle('3.2')+
xlim(-1,1)
# mean of delta:
mean(post_delta$delta)
# median of delta:
median(post_delta$delta)
# mode of delta, estimated from the "density" smoother:
density(post_delta$delta)$x[which(density(post_delta$delta)$y==max(density(post_delta$delta)$y))]
# 95% credible interval for delta:
quantile(post_delta$delta, c(.025,.975))
k1 <- 8
k2 <- 7
n1 <- 10
n2 <- 10
samples <- jags(data, inits=myinits, parameters,
model.file =f, n.chains=1, n.iter=10000,
n.burnin=1, n.thin=1, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
post_delta <- data.frame(samples$BUGSoutput$sims.list$delta)
names(post_delta)<-c('delta')
ggplot(data=post_delta,aes(x=delta))+
#geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2,colour='blue')+
theme_bw()+
ggtitle('3.2.1a: k1=8, n1=10; k2=7; n2=10')+
xlim(-1,1)
k1 <- 80
k2 <- 70
n1 <- 100
n2 <- 100
samples <- jags(data, inits=myinits, parameters,
model.file ="Rate_2.txt", n.chains=1, n.iter=10000,
n.burnin=1, n.thin=1, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
post_delta <- data.frame(samples$BUGSoutput$sims.list$delta)
names(post_delta)<-c('delta')
ggplot(data=post_delta,aes(x=delta))+
#geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2,colour='blue')+
theme_bw()+
ggtitle('3.2.1b: k1=80, n1=100; k2=70; n2=100')+
xlim(-1,1)
k1 <- 0
k2 <- 0
n1 <- 1
n2 <- 5
samples <- jags(data, inits=myinits, parameters,
model.file =f, n.chains=1, n.iter=10000,
n.burnin=1, n.thin=1, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
post_delta <- data.frame(samples$BUGSoutput$sims.list$delta)
names(post_delta)<-c('delta')
ggplot(data=post_delta,aes(x=delta))+
#geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2,colour='blue')+
theme_bw()+
ggtitle('3.2.2: k1=0, n1=1; k2=0; n2=5')+
xlim(-1,1)
k1 <- 80
k2 <- 70
n1 <- 100
n2 <- 100
samples <- jags(data, inits=myinits, parameters,
model.file ="Rate_2.txt", n.chains=1, n.iter=10000,
n.burnin=1, n.thin=1, DIC=T)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
post_delta <- data.frame(samples$BUGSoutput$sims.list$delta)
names(post_delta)<-c('delta')
ggplot(data=post_delta,aes(x=delta))+
#geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2,colour='blue')+
theme_bw()+
ggtitle('3.2.1b: k1=80, n1=100; k2=70; n2=100')+
xlim(-1,1)
rm(list=ls())
k1 <- 14
k2 <- 16
n1 <- 20
n2 <- 20
cat('# Inferring a Common Rate
model{
# Observed Counts
k1 ~ dbin(theta,n1)
k2 ~ dbin(theta,n2)
# Prior on Single Rate Theta
theta ~ dbeta(1,1)
}',file={f<-tempfile()})
data <- list("k1", "k2", "n1", "n2") # to be passed on to JAGS
myinits <-  list(
list(theta = 0.5))
# parameters to be monitored:
parameters <- c("theta")
# The following command calls JAGS with specific options.
# For a detailed description see the R2jags documentation.
samples <- jags(data, inits=myinits, parameters,
model.file =f, n.chains=1, n.iter=1000,
n.burnin=1, n.thin=1, DIC=T)
post_theta <- data.frame(samples$BUGSoutput$sims.list$theta)
names(post_theta)<-c('theta')
ggplot(data=post_theta,aes(x=theta))+
#geom_histogram(aes(y=..count../sum(..count..)),binwidth=0.02)+
geom_density(size=2,colour='green')+
theme_bw()+
ggtitle('3.3.1: k1=14, n1=20; k2=16; n2=20')+
xlim(0,1)
mean(post_theta$theta)
median(post_theta$theta)
quantile(post_theta$theta, c(.025,.975))
